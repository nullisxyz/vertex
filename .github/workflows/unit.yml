# Runs unit tests.
name: unit

on:
    pull_request:
    merge_group:
    push:
        branches: [main]

env:
    CARGO_TERM_COLOR: always

concurrency:
    group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
    cancel-in-progress: true

jobs:
    test:
        # name: test / ${{ matrix.type }} (${{ matrix.partition }}/${{ matrix.total_partitions }})
        name: test / ${{ matrix.type }}
        runs-on: ubuntu-latest
        env:
            RUST_BACKTRACE: 1
        strategy:
            matrix:
                include:
                    - type: swarm
                      args: ""
                    # - type: ethereum
                    #   args: --features "asm-keccak ethereum" --locked
                    #   partition: 1
                    #   total_partitions: 2
                    # - type: ethereum
                    #   args: --features "asm-keccak ethereum" --locked
                    #   partition: 2
                    #   total_partitions: 2
                    # - type: optimism
                    #   args: --features "asm-keccak optimism" --locked --exclude reth --exclude reth-bench --exclude "example-*" --exclude "reth-ethereum-*" --exclude "*-ethereum"
                    #   partition: 1
                    #   total_partitions: 2
                    # - type: optimism
                    #   args: --features "asm-keccak optimism" --locked --exclude reth --exclude reth-bench --exclude "example-*" --exclude "reth-ethereum-*" --exclude "*-ethereum"
                    #   partition: 2
                    #   total_partitions: 2
                    # - type: book
                    #   args: --manifest-path book/sources/Cargo.toml
                    #   partition: 1
                    #   total_partitions: 1
        timeout-minutes: 30
        steps:
            - uses: actions/checkout@v4
            - uses: rui314/setup-mold@v1
            - uses: dtolnay/rust-toolchain@stable
            - uses: Swatinem/rust-cache@v2
              with:
                  cache-on-failure: true
            - uses: taiki-e/install-action@nextest
            - if: "${{ matrix.type == 'book' }}"
              uses: arduino/setup-protoc@v3
              with:
                  repo-token: ${{ secrets.GITHUB_TOKEN }}
            - name: Install cargo-llvm-cov
              uses: taiki-e/install-action@cargo-llvm-cov
            - name: Generate coverage
              run: |
                  cargo llvm-cov nextest \
                    ${{ matrix.args }} --workspace \
                    --no-tests=warn \
                    -E "!kind(test)" \
                    --lcov --output-path lcov.info
            - name: Upload coverage artifact
              uses: actions/upload-artifact@v4
              with:
                  name: coverage-report
                  path: lcov.info
                  retention-days: 1
              # run: |
              #     cargo nextest run \
              #       ${{ matrix.args }} --workspace \
              #       --no-tests=warn \
              #       --partition hash:${{ matrix.partition }}/2 \
              #       -E "!kind(test)"

    doc:
        name: doc tests (${{ matrix.network }})
        runs-on: ubuntu-latest
        env:
            RUST_BACKTRACE: 1
        timeout-minutes: 30
        # strategy:
        #     matrix:
        #         network: ["ethereum", "optimism"]
        steps:
            - uses: actions/checkout@v4
            - uses: rui314/setup-mold@v1
            - uses: dtolnay/rust-toolchain@stable
            - uses: Swatinem/rust-cache@v2
              with:
                  cache-on-failure: true
            - name: Run doctests
              # run: cargo test --doc --workspace --features "${{ matrix.network }}"
              run: cargo test --doc --workspace

    upload-coverage:
        name: Upload Coverage to Codecov
        runs-on: ubuntu-latest
        needs: [test]
        steps:
            - uses: actions/download-artifact@v4
              with:
                  name: coverage-report
            - name: Upload coverage to Codecov
              uses: codecov/codecov-action@v5
              with:
                  files: lcov.info
                  fail_ci_if_error: true
                  token: ${{ secrets.CODECOV_TOKEN }}

    unit-success:
        name: unit success
        runs-on: ubuntu-latest
        if: always()
        needs: [test]
        timeout-minutes: 30
        steps:
            - name: Decide whether the needed jobs succeeded or failed
              uses: re-actors/alls-green@release/v1
              with:
                  jobs: ${{ toJSON(needs) }}
